apiVersion: redhatcop.redhat.io/v1alpha1
kind: Patch
metadata:
  name: config-patches
  namespace: openshift-config
  labels:
    {{- include "openshift-config.labels" . | nindent 4 }}  
spec:
  serviceAccountRef:
    name: default
  patches:
    # openshift-config-argocd-app-patch:
    #   targetObjectRef:
    #     apiVersion: argoproj.io/v1alpha1
    #     kind: Application
    #     namespace: openshift-gitops
    #     name: openshift-config
    #   sourceObjectRefs:
    #   - apiVersion: config.openshift.io/v1
    #     kind: DNS
    #     name: cluster  
    #   patchTemplate: |
    #     spec:
    #       source:
    #         helm:
    #           values: |
    #             base_domain: {{ "{{" }} (index . 1).spec.baseDomain {{ "}}" }}
    #  patchType: application/merge-patch+json
    group-sync-patch:
      targetObjectRef:
        apiVersion: redhatcop.redhat.io/v1alpha1
        kind: GroupSync
        namespace: group-sync-operator
        name: github-group-sync-configuration
      sourceObjectRefs:
      - apiVersion: v1
        kind: Secret
        namespace: backstage
        name: github-credentials   
      patchTemplate: |
        spec:
          providers:
          - github:
              credentialsSecret:
                name: github-group-sync
                namespace: group-sync-operator
              organization: {{ "{{" }} (index . 1).data.GITHUB_ORG | b64dec {{ "}}" }}  
              url: 'https://api.github.com/'
              v4url: 'https://api.github.com/graphql'          
            name: github
      patchType: application/merge-patch+json 
    pull-secret-service-account-patch:
      targetObjectRef:
        apiVersion: v1
        kind: ServiceAccount
        name: default
        namespace: 
      sourceObjectRefs:
      - apiVersion: v1
        kind: Namespace
        name: '{{ "{{" }} .metadata.namespace {{ "}}" }}'   
      patchTemplate: |
        imagePullSecrets:
        {{ "{{-" }} if and (and (hasKey (index . 1).metadata.labels "app") (not (eq ((index . 1).metadata.labels.environment | toString) "build"))) (not (has (dict "name" "quay-pull-secret") (index . 0).imagePullSecrets)) {{ "}}" }}      
        {{ "{{" }} append (index . 0).imagePullSecrets (dict "name" "quay-pull-secret") | toYaml | indent 2 {{ "}}" }}
        {{ "{{-" }} else {{ "}}" }}
        {{ "{{" }} (index . 0).imagePullSecrets | toYaml | indent 2 {{ "}}" }}
        {{ "{{-" }} end {{ "}}" }}        
      patchType: application/merge-patch+json     
    # backstage-app-patch:       
    #   targetObjectRef:
    #     apiVersion: argoproj.io/v1alpha1
    #     kind: Application
    #     namespace: openshift-gitops
    #     name: backstage
    #   sourceObjectRefs:
    #   - apiVersion: config.openshift.io/v1
    #     kind: DNS
    #     name: cluster        
    #   patchTemplate: |
    #     spec:
    #       source:
    #         helm:
    #           values: |
    #             base_domain: {{ "{{" }} (index . 1).spec.baseDomain {{ "}}" }}
# postgresql:
#   securityContext:
#     fsGroup: {{ "{{" }} index (index (lookup "v1" "Namespace" "" "backstage").metadata.annotations "openshift.io/sa.scc.supplemental-groups" | splitList "/") 0 {{ "}}" }} 
#   containerSecurityContext:
#     runAsUser: {{ "{{" }} index (index (lookup "v1" "Namespace" "" "backstage").metadata.annotations "openshift.io/sa.scc.uid-range" | splitList "/") 0 {{ "}}" }} 
#   volumePermissions:
#     securityContext:
#       runAsUser: {{ "{{" }} index (index (lookup "v1" "Namespace" "" "backstage").metadata.annotations "openshift.io/sa.scc.uid-range" | splitList "/") 0 {{ "}}" }} 
#   metrics:
#     securityContext:
#       runAsUser: {{ "{{" }} index (index (lookup "v1" "Namespace" "" "backstage").metadata.annotations "openshift.io/sa.scc.uid-range" | splitList "/") 0 {{ "}}" }}                
    #  patchType: application/merge-patch+json
    # action-runner-app-patch:
    #   targetObjectRef:
    #     apiVersion: argoproj.io/v1alpha1
    #     kind: Application
    #     namespace: openshift-gitops
    #     name: github-action-runner
    #   sourceObjectRefs:
    #   - apiVersion: config.openshift.io/v1
    #     kind: DNS
    #     name: cluster        
    #   patchTemplate: |
    #     spec:
    #       source:
    #         helm:
    #           values: |
    #             base_domain: {{ "{{" }} (index . 1).spec.baseDomain {{ "}}" }}
    #  patchType: application/merge-patch+json                
    # vault-app-patch:
    #   targetObjectRef:
    #     apiVersion: argoproj.io/v1alpha1
    #     kind: Application
    #     namespace: openshift-gitops
    #     name: vault
    #   sourceObjectRefs:
    #   - apiVersion: config.openshift.io/v1
    #     kind: DNS
    #     name: cluster        
    #   patchTemplate: |
    #     spec:
    #       source:
    #         helm:
    #           values: |
    #             base_domain: {{ "{{" }} (index . 1).spec.baseDomain {{ "}}" }}
    #   patchType: application/merge-patch+json
    # ingress-operator-config:
    #   targetObjectRef:
    #     apiVersion: operator.openshift.io/v1
    #     kind: IngressController
    #     name: default
    #     namespace: openshift-ingress-operator
    #   patchTemplate: |
    #     spec:
    #       defaultCertificate:
    #         name: lets-encrypt-certs-tls
    #       routeAdmission:
    #         wildcardPolicy: WildcardsAllowed              
    #   patchType: application/merge-patch+json
    letsencrypt-certs:
      targetObjectRef:
        apiVersion: v1
        kind: Secret
        name: lets-encrypt-certs-tls
        namespace: openshift-ingress
      patchTemplate: |
        data:
          cert: {{ "{{" }} (index (index . 0).data "tls.crt") {{ "}}" }}
          key: {{ "{{" }} (index (index . 0).data "tls.key") {{ "}}" }}
      patchType: application/merge-patch+json
    github-ocp-oauth-provider:
      targetObjectRef:
        apiVersion: config.openshift.io/v1
        kind: OAuth
        name: cluster
      sourceObjectRefs:
      - apiVersion: v1
        kind: Secret
        name: ocp-github-app-credentials
        namespace: openshift-config  
      - apiVersion: v1
        kind: Secret
        namespace: backstage
        name: github-credentials        
      patchTemplate: |
        {{ "{{-" }} $backStageDemoIDP:= dict "name" "backstage-demo-github" "mappingMethod" "claim" "type" "GitHub" "github" (dict "teams" (list) "clientID" ((index . 1).data.client_id | b64dec) "clientSecret" (dict "name" "ocp-github-app-credentials") "organizations" (list ((index . 2).data.GITHUB_ORG | b64dec)) ) {{ "-}}" }}
        spec:
          identityProviders:
          {{ "{{-" }} if (not (has $backStageDemoIDP (index . 0).spec.identityProviders)) {{ "}}" }}
        {{ "{{" }} append (index . 0).spec.identityProviders $backStageDemoIDP | toYaml | indent 4 {{ "}}" }}
          {{ "{{-" }} else {{ "}}" }}
        {{ "{{" }} (index . 0).spec.identityProviders | toYaml | indent 4 {{ "}}" }}
          {{ "{{-" }} end {{ "}}" }}            
      patchType: application/merge-patch+json
    letsencrypt-issuer:
      targetObjectRef:
        apiVersion: cert-manager.io/v1
        kind: ClusterIssuer
        name: letsencrypt-issuer
      sourceObjectRefs:
      - apiVersion: config.openshift.io/v1
        kind: DNS
        name: cluster
      - apiVersion: config.openshift.io/v1
        kind: Infrastructure
        name: cluster
      - apiVersion: v1
        kind: Secret
        namespace: cert-manager
        name: cert-manager-dns-credentials                        
      patchTemplate: | 
        spec:
          acme:
            solvers:
            - dns01:
                route53:
                  accessKeyID: {{ "{{" }} (index . 3).data.aws_access_key_id | b64dec {{ "}}" }}
                  secretAccessKeySecretRef:
                    name: cert-manager-dns-credentials
                    key: aws_secret_access_key
                  region: {{ "{{" }} (index . 2).status.platformStatus.aws.region {{ "}}" }}
                  hostedZoneID: {{ "{{" }} (index . 1).spec.publicZone.id {{ "}}" }}
      patchType: application/merge-patch+json
    github-vault-secret-engine:
      targetObjectRef:
        apiVersion: redhatcop.redhat.io/v1alpha1
        kind: GitHubSecretEngineConfig
        name: github
        namespace: vault-admin
      sourceObjectRefs:
      - apiVersion: v1
        kind: Secret
        namespace: vault-admin
        name: vault-github-plugin-creds        
      patchTemplate: | 
        spec:
          applicationID: {{ "{{" }} (index . 1).data.github_app_id | b64dec {{ "}}" }}
      patchType: application/merge-patch+json
    github-vault-secret-engine-role:
      targetObjectRef:
        apiVersion: redhatcop.redhat.io/v1alpha1
        kind: GitHubSecretEngineRole
        namespace: vault-admin
      sourceObjectRefs:
      - apiVersion: v1
        kind: Secret
        namespace: vault-admin
        name: vault-github-plugin-creds        
      patchTemplate: | 
        spec:
          organizationName: {{ "{{" }} (index . 1).data.github_org | b64dec {{ "}}" }}
      patchType: application/merge-patch+json
    argocd-admin-user-secret-for-tekton:
      targetObjectRef:
        apiVersion: v1
        kind: Secret
        name: argocd-env-secret
      sourceObjectRefs:
      - apiVersion: v1
        kind: Secret
        namespace: '{{ "{{" }} .metadata.namespace {{ "}}" }}'
        name: tenant-gitops-cluster
      patchTemplate: | 
        data:
          ARGOCD_USERNAME: {{ "{{" }} "admin" | b64enc {{ "}}" }}
          ARGOCD_PASSWORD: {{ "{{" }} (index (index . 1).data "admin.password") {{ "}}" }}
      patchType: application/merge-patch+json         
    # kcp-secret-argocd:
    #   targetObjectRef:
    #     apiVersion: v1
    #     kind: Secret
    #     name: kcp-secret
    #     namespace: openshift-gitops
    #   sourceObjectRefs:
    #   - apiVersion: v1
    #     kind: Secret
    #     namespace: kcp
    #     name: kcp-init
    #   - apiVersion: v1
    #     kind: ConfigMap
    #     namespace: openshift-gitops
    #     name: openshift-service-ca.crt              
    #   patchTemplate: | 
    #     {{ "{{-" }} $value:=dict "bearerToken" ((index . 1).data.token | toString | b64dec) "tlsClientConfig" (dict "caData" (index ((index . 2).data) "service-ca.crt" | b64enc )) {{ "}}" }}
    #     data:
    #       config: {{ "{{" }} $value | toJson | b64enc {{ "}}" }}
    #   patchType: application/merge-patch+json
    user-workload-grafana-app-patch:
      targetObjectRef:
        apiVersion: argoproj.io/v1alpha1
        kind: Application
        namespace: openshift-gitops
        name: user-workload-grafana
      sourceObjectRefs:
      - apiVersion: v1
        kind: Secret
        namespace: openshift-config
        name: default-service-account        
      patchTemplate: |
        spec:
          source:
            helm:
              values: |
                userworkload:
                  prometheus:
                    bearertoken: {{ "{{" }} (index . 1).data.token | toString | b64dec {{ "}}" }}
      patchType: application/merge-patch+json
    # service-mesh-ingress-app-patch:
    #   targetObjectRef:
    #     apiVersion: argoproj.io/v1alpha1
    #     kind: Application
    #     namespace: openshift-gitops
    #     name: service-mesh-ingress
    #   sourceObjectRefs:
    #   - apiVersion: config.openshift.io/v1
    #     kind: DNS
    #     name: cluster        
    #   patchTemplate: |
    #     spec:
    #       source:
    #         helm:
    #           values: |
    #             base_domain: {{ "{{" }} (index . 1).spec.baseDomain {{ "}}" }}
    #   patchType: application/merge-patch+json
    virtual-service-basedomain-patch:
      targetObjectRef:
        apiVersion: networking.istio.io/v1beta1
        kind: VirtualService
        labelSelector:
          matchLabels: 
            replace_basedomain: "true"
      sourceObjectRefs:
      - apiVersion: config.openshift.io/v1
        kind: DNS
        name: cluster        
      patchTemplate: |
        spec:
          hosts:
            - {{ "{{" }} (index . 0).metadata.name {{ "}}" }}-{{ "{{" }} (index . 0).metadata.namespace {{ "}}" }}.mesh.apps.{{ "{{" }} (index . 1).spec.baseDomain {{ "}}" }}
      patchType: application/merge-patch+json
    database-admin-vault-policy-patch:
      targetObjectRef:
        apiVersion: redhatcop.redhat.io/v1alpha1
        kind: Policy
        name: database-engine-admin
        namespace: vault-admin
      sourceObjectRefs:
      - apiVersion: v1
        kind: ConfigMap
        name: kubeauth-accessor
        namespace: vault       
      patchTemplate: |
        spec:
          policy: |
            # query existing mounts
            path "/sys/mounts" {
              capabilities = [ "list", "read"]
              allowed_parameters = {
                "type" = ["database"]
                "*"   = []
              }
            }

            # mount database secrets engines
            # the + is for the db name, assuming the can be more than one db
            path "/sys/mounts/{{ "{{ \"{{\" }}" }}identity.entity.aliases.{{ "{{" }} (index . 1).data.accessor {{ "}}" }}.metadata.service_account_namespace{{ "{{ \"}}\" }}" }}/+" {
              capabilities = [ "create", "read", "update", "delete"]
              allowed_parameters = {
                "type" = ["database"]
                "*"   = []
              }
            }

            # tune database secrets engines
            path "/sys/mounts/{{ "{{ \"{{\" }}" }}identity.entity.aliases.{{ "{{" }} (index . 1).data.accessor {{ "}}" }}.metadata.service_account_namespace{{ "{{ \"}}\" }}" }}/+/tune" {
              capabilities = [ "create", "read", "update", "delete"]
            }

            # Configure database secrets engines
            path "/{{ "{{ \"{{\" }}" }}identity.entity.aliases.{{ "{{" }} (index . 1).data.accessor {{ "}}" }}.metadata.service_account_namespace{{ "{{ \"}}\" }}" }}/+/config/+" {
              capabilities = [ "create", "read", "update", "delete"]
            }

            # Configure database roles
            path "/{{ "{{ \"{{\" }}" }}identity.entity.aliases.{{ "{{" }} (index . 1).data.accessor {{ "}}" }}.metadata.service_account_namespace{{ "{{ \"}}\" }}" }}/+/roles/+" {
              capabilities = [ "create", "read", "update", "delete"]
            }

            # read secrets
            path "/{{ "{{ \"{{\" }}" }}identity.entity.aliases.{{ "{{" }} (index . 1).data.accessor {{ "}}" }}.metadata.service_account_namespace{{ "{{ \"}}\" }}" }}/+/creds/+" {
              capabilities = [ "read" ]
            }            
      patchType: application/merge-patch+json
    patch-operator-mutatingwebhookconfigurations:
      targetObjectRef:
        apiVersion: admissionregistration.k8s.io/v1
        kind: MutatingWebhookConfiguration
        name: patch-operator-inject
      patchTemplate: '[{"op": "replace", "path": "/webhooks/0/clientConfig/caBundle", "value":"{{ "{{" }} (index (index . 1).data "olmCAKey") {{ "}}" }}"}]'     
      patchType: application/json-patch+json
      sourceObjectRefs:
      - apiVersion: v1
        kind: Secret
        name: patch-operator-controller-manager-service-cert
        namespace: patch-operator
    argocd-secret-for-webhook:
      targetObjectRef:
        apiVersion: v1
        kind: Secret
        name: argocd-secret
        labelSelector:
          matchLabels:
            app.kubernetes.io/managed-by: tenant-gitops
      sourceObjectRefs:
      - apiVersion: v1
        kind: Secret
        name: argocd-webhook
        namespace: '{{ "{{" }} .metadata.namespace {{ "}}" }}'
      patchType: application/merge-patch+json
      patchTemplate: | 
        data:
          webhook.github.secret: {{ "{{" }} (index . 1).data.secret | b64enc {{ "}}" }}
    argocd-webhook:
      targetObjectRef:
        apiVersion: redhatcop.redhat.io/v1alpha1
        kind: GitWebhook
        name: argocd  
      sourceObjectRefs:
      - apiVersion: config.openshift.io/v1
        kind: DNS
        name: cluster
      patchType: application/merge-patch+json
      patchTemplate: |
        spec:
          webhookURL: https://tenant-gitops-server-{{ "{{" }} (index . 0).metadata.namespace {{ "}}" }}.apps.{{ "{{" }} (index . 1).spec.baseDomain {{ "}}" }}                   
    # database-secret-engine-username-patch:
    #   patchType: application/merge-patch+json
    #   targetObjectRef:
    #     apiVersion: redhatcop.redhat.io/v1alpha1
    #     kind: DatabaseSecretEngineConfig
    #     labelSelector:
    #       matchLabels: 
    #         inject-username: cockroach-serverless        
    #   patchTemplate: |
    #     spec:
    #       username: {{ "{{" }} (index . 1).data.username | b64dec {{ "}}" }}
    #       connectionURL: postgresql://{{ "{{" }} "{{ "{{" }}username{{ "}}" }}:{{ "{{" }}password{{ "}}" }}" {{ "}}" }}@{{ "{{" }} (index (index . 2).status.instanceInfo "regions.1.sqlDns") {{ "}}" }}:26257/defaultdb?sslmode=verify-full&options=--cluster%3D{{ "{{" }} index ((index . 2).status.instanceInfo) "config.serverless.routingId" {{ "}}" }}
    #   sourceObjectRefs:
    #   - apiVersion: v1
    #     kind: Secret
    #     namespace: "{{ "{{" }} .metadata.namespace {{ "}}" }}"
    #     name: crdb-cloud-user-credentials-{{ "{{" }} .metadata.name {{ "}}" }}
    #   - apiVersion: dbaas.redhat.com/v1alpha1
    #     kind: DBaaSInstance
    #     namespace: "{{ "{{" }} .metadata.namespace {{ "}}" }}"
    #     name: "{{ "{{" }} .metadata.name {{ "}}" }}"
    # olm-config-disable-csv-copy:
    #   patchType: application/merge-patch+json
    #   targetObjectRef:
    #     apiVersion: operators.coreos.com/v1
    #     kind: OLMConfig
    #     name: cluster        
    #   patchTemplate: |
    #     spec:
    #       features:
    #         disableCopiedCSVs: true                             
             